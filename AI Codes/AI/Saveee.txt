using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Events;
using System;

public class gameMaster : MonoBehaviour
{
    public GameObject[] spaceList;
    public GameObject marker;

    public Button leftButton, dropButton, rightButton, winButton;
    public Text winText;
    bool lInteract = true;
    bool rInteract = true;
    bool dInteract = true;
    float markerPos = 0;
    int colValue;
    int[] corrSpaces = new int[6];
    int[] bottomMark = new int[7] {5,5,5,5,5,5,5};
    int dropCount = 1;
    Color corrColor;


    



    void Start(){

        ColUpdate();
        markerPos = 0;
        leftButton.onClick.AddListener(LeftClick);
        rightButton.onClick.AddListener(RightClick);
        dropButton.onClick.AddListener(DropClick);
        winButton.interactable = false;
        winButton.GetComponent<Image>().color = Color.clear;
        winText.GetComponent<Text>().color = Color.clear;
    }

    public void Update(){
        leftButton.interactable = lInteract;
        rightButton.interactable = rInteract;
        dropButton.interactable = dInteract;

        if(markerPos <= -300){
            lInteract = false;
        }
        else if (markerPos > -300){
            lInteract = true;
        }

        if(markerPos >= 300){
            rInteract = false;
        }
        else if (markerPos < 300){
            rInteract = true;
        }
    }


    public void LeftClick(){
        if(markerPos >-300 && lInteract == true){
            lInteract = true;
            marker.transform.position += new Vector3(-100f,0f,0f);
            markerPos -= 100f;
        }
        ColUpdate();
    }

    public void RightClick(){
        if(markerPos < 300 && rInteract == true){
            rInteract = true;
            marker.transform.position += new Vector3(100f,0f,0f);
            markerPos += 100f;
        }
        ColUpdate();
    }

    void DropClick(){
        if(spaceList[corrSpaces[bottomMark[colValue]]].GetComponent<Image>().color == Color.white){
            spaceList[corrSpaces[bottomMark[colValue]]].GetComponent<Image>().color = corrColor;
        }

        bottomMark[colValue]--;
        dropCount++;

        ColUpdate();
    }

    void ColUpdate(){
        winCheck();
        

        winButton.interactable = false;
        winButton.GetComponent<Image>().color = Color.clear;
        winText.GetComponent<Text>().color = Color.clear;

        for(int i=0; i<7; i++){
            if(markerPos == (100*i)- 300){
                colValue = i;
                break;
            }
        }

        for( int j=0; j<6; j++){
            corrSpaces[j] = (7*j) + colValue;
        }

        if(bottomMark[colValue]<= -1){
            dInteract = false;
            bottomMark[colValue] = -1;
        }
        else{
            dInteract = true;
        }

        if(dropCount%2 == 0){
            corrColor = Color.blue;
        }
        else if(dropCount%2 != 0){
            corrColor = Color.red;
        }

        marker.GetComponent<Image>().color = corrColor;
        leftButton.interactable = lInteract;
        rightButton.interactable = rInteract;
        dropButton.interactable = dInteract;
    }

    void winCheck(){
        for(int row = 0; row<6; row++){
            for(int col = 0; col<4; col++){
                if(spaceList[col+(row*7)].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+1].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+2].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+3].GetComponent<Image>().color == corrColor){
                    winner(corrColor);
                }
            }
        }

        for(int row = 0; row<3; row++){
            for(int col = 0; col<7; col++){
                if(spaceList[col+(row*7)].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+7].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+14].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+21].GetComponent<Image>().color == corrColor){
                    winner(corrColor);
                }
            }
        }

        for(int row = 0; row<3; row++){
            for(int col = 0; col<4; col++){
                if(spaceList[col+(row*7)].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+8].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+16].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+24].GetComponent<Image>().color == corrColor){
                    winner(corrColor);
                }
            }
        }

        for(int row = 0; row<3; row++){
            for(int col = 0; col<4; col++){
                if(spaceList[col+(row*7)].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+6].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+12].GetComponent<Image>().color == corrColor && 
                spaceList[col+(row*7)+18].GetComponent<Image>().color == corrColor){
                    winner(corrColor);
                }
            }
        }
    }

    void winner(Color winColor){
        winButton.interactable = false;
        winButton.GetComponent<Image>().color = Color.white;
        winText.GetComponent<Text>().color = Color.black;

        if(winColor == Color.blue){
            winText.text = "Blue Wins!";
            Debug.Log("Blue");
        }

        else if(winColor == Color.red){
            winText.text = "Red Wins!";
            Debug.Log("Red");
        }
        else if(dropCount >=42){
            winText.text = "Tie!";
            Debug.Log("Tie");
        }

        leftButton.interactable = lInteract;
        rightButton.interactable = rInteract;
        dropButton.interactable = dInteract;
    }
}


